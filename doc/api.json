{
  "openapi": "3.0.0",
  "info": {
    "version": "0.4",
    "title": "SmartThing device API",
    "description": "Описание API устройства семейства SmartThing"
  },
  "servers": [
    {
      "description": "Test device",
      "url": "http://192.168.1.13"
    }
  ],
  "paths": {
    "/info/system": {
      "get": {
        "tags": [
          "Device information"
        ],
        "description": "Get device full information",
        "responses": {
          "200": {
            "description": "Device full info",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#components/schemas/DeviceInfo"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "Device information"
        ],
        "description": "Update device info (only name for now)",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "name": {
                    "type": "string",
                    "description": "New device name"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Device info updated"
          }
        }
      }
    },
    "/wifi": {
      "get": {
        "tags": [
          "WiFi"
        ],
        "description": "Get wifi configuration",
        "responses": {
          "200": {
            "description": "Wifi SSID and password",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#components/schemas/WifiInfo"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "WiFi"
        ],
        "description": "Update wifi configuration",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#components/schemas/WifiInfo"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Wifi SSID and password was updated"
          }
        }
      }
    },
    "/config/info": {
      "get": {
        "tags": [
          "Configuration"
        ],
        "description": "Get device configuration fields",
        "responses": {
          "200": {
            "description": "Device condifguration fields",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "example": {
                    "config_key": {
                      "caption": "Some caption",
                      "type": "value type"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/config/values": {
      "get": {
        "tags": [
          "Configuration"
        ],
        "description": "Get device configuration",
        "responses": {
          "200": {
            "description": "Device configuration",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#components/schemas/Configuration"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "Configuration"
        ],
        "description": "Save device configuration",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#components/schemas/Configuration"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "New device configuration entries added"
          }
        }
      },
      "delete": {
        "tags": [
          "Configuration"
        ],
        "description": "Delete config value",
        "parameters": [
          {
            "name": "name",
            "in": "query",
            "description": "Name of configuration entry",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Configuration value was deleted"
          },
          "404": {
            "description": "Configuration entry with provided name not found"
          }
        }
      }
    },
    "/config/delete/all": {
      "delete": {
        "tags": [
          "Configuration"
        ],
        "description": "Delete configuration value",
        "responses": {
          "200": {
            "description": "Configuration values were deleted"
          }
        }
      }
    },
    "/actions/info": {
      "get": {
        "tags": [
          "Actions"
        ],
        "description": "Get device actions",
        "responses": {
          "200": {
            "description": "Device actions",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#components/schemas/Actions"
                }
              }
            }
          }
        }
      }
    },
    "/actions/call": {
      "get": {
        "tags": [
          "Actions"
        ],
        "description": "Call device action",
        "parameters": [
          {
            "name": "name",
            "in": "query",
            "description": "Action system name",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Action completed successfully"
          },
          "500": {
            "description": "Failed to complete action",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#content/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/actions/schedule": {
      "put": {
        "tags": ["Actions"],
        "description": "Update action schedule delay",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#components/schemas/ActionSchedule"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Schedule delay updated"
          },
          "500": {
            "description": "Failed to update schedule delay",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#content/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/sensors": {
      "get": {
        "tags": [
          "Sensors and states"
        ],
        "description": "Get device sensors values",
        "responses": {
          "200": {
            "description": "Sensors values",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#components/schemas/SensorsValues"
                }
              }
            }
          }
        }
      }
    },
    "/sensors/types": {
      "get": {
        "tags": [
          "Sensors and states"
        ],
        "description": "Get device sensors types",
        "responses": {
          "200": {
            "description": "Sensors types",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#components/schemas/SensorsTypes"
                }
              }
            }
          }
        }
      }
    },
    "/state": {
      "get": {
        "tags": [
          "Sensors and states"
        ],
        "description": "Get device states values",
        "responses": {
          "200": {
            "description": "Device states values",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#components/schemas/DeviceStates"
                }
              }
            }
          }
        }
      }
    },
    "/hooks": {
      "get": {
        "tags": [
          "Hook"
        ],
        "description": "Get all device hooks",
        "responses": {
          "200": {
            "description": "List of hooks",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#components/schemas/ObservablesHooks"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "Hook"
        ],
        "description": "Create new hook",
        "requestBody": {
          "description": "Hook info",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#components/schemas/HookRequest"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Hook created"
          },
          "500": {
            "description": "Failed to create hook",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "Hook"
        ],
        "description": "Updates hook",
        "requestBody": {
          "description": "Hook info",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#components/schemas/HookRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Hook updated"
          },
          "500": {
            "description": "Failed to update hook",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "Hook"
        ],
        "description": "Delete observable's hook",
        "parameters": [
          {
            "name": "type",
            "description": "Observable type",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string"
            },
            "example": "sensor/state"
          },
          {
            "name": "name",
            "description": "Observable name",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "id",
            "description": "Hook id",
            "required": true,
            "in": "query",
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Hook deleted"
          },
          "500": {
            "description": "Failed to delete hook",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/hooks/by/observable": {
      "get": {
        "tags": [
          "Hook"
        ],
        "description": "Get hooks for observable object (sensor or state)",
        "parameters": [
          {
            "name": "type",
            "in": "query",
            "description": "Observable type",
            "example": "sensor/state",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "name",
            "in": "query",
            "description": "Observable name",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "List of hooks",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#components/schemas/hooksList"
                }
              }
            }
          }
        }
      }
    },
    "/hooks/by/id": {
      "get": {
        "tags": [
          "Hook"
        ],
        "description": "Get hook by id",
        "parameters": [
          {
            "name": "type",
            "in": "query",
            "description": "Observable type",
            "example": "sensor/state",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "name",
            "in": "query",
            "description": "Observable name",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "id",
            "in": "query",
            "description": "Hook id",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "List of hooks",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#components/schemas/Hook"
                }
              }
            }
          }
        }
      }
    },
    "/hooks/templates": {
      "get": {
        "tags": [
          "Hook"
        ],
        "description": "Get hooks templates for creation",
        "responses": {
          "200": {
            "$ref": "#components/responses/HookTemplates"
          }
        }
      }
    },
    "/hooks/test": {
      "get": {
        "tags": [
          "Hook"
        ],
        "description": "Test hook call",
        "parameters": [
          {
            "name": "type",
            "in": "query",
            "description": "Observable type",
            "example": "sensor/state",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "name",
            "in": "query",
            "description": "Observable name",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "id",
            "in": "query",
            "description": "Hook id",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "value",
            "description": "Value to pass in hook",
            "required": false,
            "in": "query",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Hook called successfully"
          },
          "400": {
            "description": "Missing parameters"
          },
          "500": {
            "description": "Hook call failed"
          }
        }
      }
    },
    "/features": {
      "get": {
        "tags": ["Utils"],
        "description": "Get devices features",
        "responses": {
          "200": {
            "description": "Device features",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "example": {
                    "web": true,
                    "actions": true,
                    "actionsScheduler": true,
                    "sensors": true,
                    "states": true,
                    "hooks": true,
                    "logger": true
                  }
                }
              }
            }
          }
        }
      }
    },
    "/metrics": {
      "get": {
        "tags": [
          "Utils"
        ],
        "description": "Get system metrics",
        "responses": {
          "200": {
            "description": "Metrics object",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          }
        }
      }
    }
  },
  "components": {
    "schemas": {
      "ErrorResponse": {
        "description": "Error response",
        "type": "object",
        "properties": {
          "error": {
            "description": "Error message",
            "type": "string"
          }
        }
      },
      "DeviceInfo": {
        "description": "Device info",
        "type": "object",
        "properties": {
          "version": {
            "description": "Device firmware version",
            "type": "string"
          },
          "smtVersion": {
            "description": "SmartThing library version",
            "type": "string"
          },
          "name": {
            "description": "Device name",
            "type": "string"
          },
          "type": {
            "description": "Device type",
            "type": "string"
          },
          "ip": {
            "description": "Device ip in local network",
            "type": "string"
          },
          "board": {
            "description": "Device board type",
            "type": "string",
            "enum": ["esp32", "esp8266"]
          }
        }
      },
      "WifiInfo": {
        "description": "WiFi info object",
        "type": "object",
        "properties": {
          "ssid": {
            "description": "Wifi ssid",
            "type": "string",
            "maxLength": 32
          },
          "password": {
            "description": "Wifi password",
            "type": "string"
          },
          "mode": {
            "description": "WiFi mode: STA or AP (1 or 2)",
            "type": "integer"
          }
        }
      },
      "Configuration": {
        "description": "Device configuration",
        "type": "object",
        "example": {
          "entry1": "value1",
          "entry2": 123,
          "entry3": false
        }
      },
      "Actions": {
        "description": "Device actions info",
        "type": "array",
        "items": {
          "description": "Action",
          "type": "object",
          "properties": {
            "name": {
              "description": "Action system name",
              "type": "string"
            },
            "caption": {
              "description": "Action description for user",
              "type": "string"
            },
            "callDelay": {
              "description": "Scheduled action call delay in ms. If 0 - action not called on schedule",
              "type": "number"
            },
            "lastCall": {
              "description": "Ms after last schdeuled action call",
              "type": "number"
            }
          }
        },
        "example": [
          {
            "name": "led_on",
            "caption": "Turn led on",
            "callDelay": 15000,
            "lastCall": 3090
          },
          {
            "name": "led_off",
            "caption": "Turn led off",
            "callDelay": 0,
            "lastCall": 0
          }
        ]
      },
      "ActionSchedule": {
        "description": "Action schedule update request",
        "type": "object",
        "properties": {
          "action": {
            "description": "Action to update",
            "type": "string"
          },
          "callDelay": {
            "description": "New schdeule delay. 0 to disable schdeule for this action",
            "type": "number"
          }
        }
      },
      "SensorsValues": {
        "description": "Sensors values response",
        "type": "object",
        "properties": {
          "sensor_name": {
            "description": "Sensor value",
            "type": "integer"
          }
        },
        "example": {
          "button": 1,
          "position": 13,
          "light": 510
        }
      },
      "SensorsTypes": {
        "description": "Sensors types info",
        "properties": {
          "sensor_name": {
            "description": "Sensor type",
            "type": "string"
          }
        },
        "example": {
          "button": "digital"
        }
      },
      "DeviceStates": {
        "description": "Device states response",
        "type": "object",
        "properties": {
          "device_state": {
            "type": "string",
            "description": "Device state value"
          }
        },
        "example": {
          "wifi": "connected",
          "led": "on",
          "position": "open",
          "automode": "true"
        }
      },
      "Hook": {
        "description": "Hook",
        "type": "object",
        "properties": {
          "id": {
            "description": "Hook id",
            "type": "integer"
          },
          "caption": {
            "description": "Hook caption",
            "type": "string"
          },
          "trigger": {
            "description": "Trigger value, when hook gonna ba called"
          },
          "readonly": {
            "description": "Is hook readonly",
            "type": "boolean"
          },
          "type": {
            "description": "Hook type",
            "type": "string",
            "example": "lambda_hook/http_hook/action_hook"
          }
        }
      },
      "HooksList": {
        "description": "Observable's object hooks",
        "type": "array",
        "items": {
          "$ref": "#components/schemas/Hook"
        }
      },
      "ObservablesHooks": {
        "description": "List of all device hooks",
        "type": "array",
        "items": {
          "type": "object",
          "properties": {
            "observable": {
              "description": "Observable object info (sensor or device state)",
              "type": "object",
              "properties": {
                "name": {
                  "description": "Observable's name",
                  "type": "string"
                },
                "type": {
                  "description": "Observable's type",
                  "type": "string",
                  "example": "sensor/state"
                }
              }
            },
            "hooks": {
              "$ref": "#components/schemas/hooksList"
            }
          }
        }
      },
      "HookRequest": {
        "description": "Create hook body",
        "type": "object",
        "required": [
          "observable",
          "hook"
        ],
        "properties": {
          "observable": {
            "description": "Observable info",
            "type": "object",
            "required": [
              "type",
              "name"
            ],
            "properties": {
              "type": {
                "description": "Observable type",
                "type": "string",
                "example": "sensor/state"
              },
              "name": {
                "description": "Observable name",
                "type": "string"
              }
            }
          },
          "hook": {
            "description": "Hook info. Only base fields, take others from template.",
            "type": "object",
            "required": [
              "type"
            ],
            "properties": {
              "id": {
                "description": "Hook id. Just index in list.",
                "type": "integer"
              },
              "type": {
                "description": "Hook type. Get it from template.",
                "type": "string",
                "example": "http_hook/action_hook"
              },
              "trigger": {
                "description": "Hook trigger value",
                "type": "string"
              }
            }
          }
        }
      }
    },
    "responses": {
      "HookTemplates": {
        "description": "Hook templates response",
        "content": {
          "application/json": {
            "example": {
              "http_hook": {
                "url": {
                  "required": true
                },
                "method": {
                  "required": false,
                  "values": [
                    "GET",
                    "POST",
                    "DELETE",
                    "PUT"
                  ]
                },
                "payload": {
                  "required": false
                }
              },
              "action_hook": {
                "action": {
                  "required": true,
                  "values": {
                    "bright": "Set louver bright position",
                    "middle": "Set louver middle position",
                    "close": "Set louver close position",
                    "open": "Set louver open position",
                    "disable_auto": "Disable automode",
                    "enable_auto": "Enable automode"
                  }
                }
              }
            }
          }
        }
      }
    }
  }
}